left-context: 17
right-context: 12
num-parameters: 17118870
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=725
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=725 output-dim=725
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=725 output-dim=725
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1), Offset(tdnn1.batchnorm, 2)) input-dim=2900 output-dim=725
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=725 output-dim=725
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=725 output-dim=725
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.batchnorm, -3), tdnn2.batchnorm, Offset(tdnn2.batchnorm, 3)) input-dim=2175 output-dim=725
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=725 output-dim=725
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=725 output-dim=725
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=2175 output-dim=725
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=725 output-dim=725
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=725 output-dim=725
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.batchnorm, -3), tdnn4.batchnorm, Offset(tdnn4.batchnorm, 3)) input-dim=2175 output-dim=725
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=725 output-dim=725
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=725 output-dim=725
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -6), Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm) input-dim=2175 output-dim=725
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=725 output-dim=725
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=725 output-dim=725
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=tdnn6.batchnorm input-dim=725 output-dim=725
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=725 output-dim=725
component-node name=prefinal-chain.batchnorm component=prefinal-chain.batchnorm input=prefinal-chain.relu input-dim=725 output-dim=725
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm input-dim=725 output-dim=5160
output-node name=output input=output.affine dim=5160 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=tdnn6.batchnorm input-dim=725 output-dim=725
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=725 output-dim=725
component-node name=prefinal-xent.batchnorm component=prefinal-xent.batchnorm input=prefinal-xent.relu input-dim=725 output-dim=725
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm input-dim=725 output-dim=5160
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=5160 output-dim=5160
output-node name=output-xent input=output-xent.log-softmax dim=5160 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.006925, bias-{mean,stddev}=0.00187,0.3621
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.1847, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.2,1.3 1.4,1.5,2.5,3.2,4.0 4.6,5.1,5.3,6.8), mean=2.54, stddev=1.02], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.5,3.5,3.7,3.9 4.1,4.4,4.8,5.3,5.7 6.5,7.3,7.4,10), mean=4.9, stddev=0.829], bias-{mean,stddev}=0.06098,0.3749, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=6.72e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0003,0.0004,0.001 0.002,0.003,0.16,0.57,0.66 0.71,0.78,0.81,0.95), mean=0.258, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.03 0.03,0.05,0.38,0.81,0.87 0.89,0.92,0.93,0.94), mean=0.404, stddev=0.343]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=134400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0003,0.0007,0.001 0.002,0.003,0.16,0.57,0.65 0.71,0.78,0.82,0.95), mean=0.258, stddev=0.272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.007,0.009 0.01,0.02,0.29,0.48,0.51 0.54,0.57,0.61,0.76), mean=0.256, stddev=0.214]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=2900, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.05554, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,2.1,2.2,2.3 2.4,2.6,2.9,3.3,3.6 3.8,4.0,4.5,6.7), mean=2.95, stddev=0.489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.73,0.75,0.79 0.83,0.89,1.3,1.7,2.2 2.5,2.8,3.0,3.8), mean=1.4, stddev=0.536], bias-{mean,stddev}=-0.5742,1.301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=1.48e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.24,0.28,0.34 0.48,0.72,1.5,2.1,2.3 2.5,2.7,2.8,3.2), mean=1.43, stddev=0.675], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.13,0.18 0.22,0.28,0.43,0.59,0.64 0.69,0.74,0.75,0.79), mean=0.432, stddev=0.159]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=44544, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.24,0.28,0.35 0.49,0.72,1.5,2.1,2.3 2.5,2.7,2.8,3.2), mean=1.43, stddev=0.675], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.79,0.91,1.1 1.4,1.8,2.3,2.6,2.8 3.0,3.3,3.5,4.9), mean=2.2, stddev=0.576]
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=2175, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.06567, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,2.3,2.4,2.6 2.7,2.8,3.0,3.3,3.4 3.6,3.8,3.9,6.5), mean=3.04, stddev=0.343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,1.0,1.1,1.2 1.3,1.5,1.7,2.0,2.2 2.4,2.5,2.7,3.6), mean=1.73, stddev=0.351], bias-{mean,stddev}=-0.8139,1.312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=1.43e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.22,0.32 0.46,0.73,1.4,2.0,2.2 2.5,2.8,2.9,4.5), mean=1.39, stddev=0.683], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.13 0.17,0.25,0.40,0.52,0.59 0.64,0.68,0.73,0.79), mean=0.392, stddev=0.152]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=43008, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.22,0.31 0.45,0.73,1.4,2.0,2.2 2.5,2.8,2.9,4.6), mean=1.39, stddev=0.683], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.89,0.93,1.2 1.4,1.8,2.4,2.7,2.9 3.0,3.1,3.2,8.0), mean=2.3, stddev=0.597]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=2175, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.06861, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,2.4,2.7,2.8 2.9,2.9,3.2,3.4,3.6 3.7,3.9,4.0,5.1), mean=3.18, stddev=0.326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.2,1.3,1.3 1.4,1.5,1.8,2.1,2.3 2.5,2.8,2.9,4.8), mean=1.81, stddev=0.38], bias-{mean,stddev}=-0.8256,1.357, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=2.07e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.23,0.37 0.52,0.78,1.5,2.2,2.4 2.6,2.9,3.0,4.0), mean=1.48, stddev=0.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.10,0.13 0.18,0.24,0.39,0.53,0.59 0.64,0.68,0.69,0.74), mean=0.391, stddev=0.151]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=41472, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.23,0.37 0.51,0.78,1.5,2.2,2.4 2.6,2.9,3.0,4.0), mean=1.48, stddev=0.721], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.96,1.0,1.3 1.6,2.0,2.6,2.9,3.1 3.3,3.4,3.5,5.2), mean=2.46, stddev=0.596]
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=2175, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.07164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,2.2,2.5,2.8 2.9,3.1,3.3,3.6,3.8 3.9,4.1,4.2,4.5), mean=3.32, stddev=0.367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.2,1.3,1.3 1.4,1.5,1.8,2.2,2.5 2.7,3.1,3.4,6.9), mean=1.87, stddev=0.469], bias-{mean,stddev}=-0.7781,1.349, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=2e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.24,0.39 0.49,0.83,1.6,2.3,2.6 2.8,3.0,3.1,3.9), mean=1.58, stddev=0.765], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.11,0.14 0.18,0.25,0.39,0.52,0.58 0.62,0.67,0.69,0.77), mean=0.39, stddev=0.149]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=39936, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.25,0.38 0.50,0.83,1.6,2.3,2.6 2.8,3.0,3.2,3.9), mean=1.58, stddev=0.763], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.77,1.1,1.3 1.7,2.0,2.8,3.2,3.3 3.5,3.7,3.7,4.2), mean=2.63, stddev=0.658]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=2175, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.07538, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,2.0,2.3,2.9 3.1,3.3,3.6,3.7,3.9 4.0,4.2,4.3,5.1), mean=3.5, stddev=0.378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.3,1.3,1.4 1.4,1.5,1.9,2.3,2.6 2.9,3.3,3.8,5.9), mean=1.96, stddev=0.523], bias-{mean,stddev}=-0.3909,1.265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=2.56e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.31,0.37,0.63 0.96,1.3,2.0,2.7,3.0 3.3,3.6,3.6,4.0), mean=1.99, stddev=0.789], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.19 0.24,0.30,0.41,0.52,0.58 0.62,0.66,0.69,0.78), mean=0.408, stddev=0.13]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=1, count=38400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.32,0.36,0.62 0.95,1.3,2.0,2.7,3.0 3.3,3.6,3.6,4.0), mean=1.99, stddev=0.789], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,1.2,1.4,1.9 2.5,3.0,3.6,4.0,4.1 4.3,4.4,4.4,4.9), mean=3.44, stddev=0.692]
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=725, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.1139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.6,2.6,2.7,2.8 2.8,2.9,3.0,3.2,3.4 3.5,3.6,3.7,4.2), mean=3.06, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.4,2.5,2.6 2.7,2.8,3.0,3.3,3.4 3.6,3.8,3.9,4.6), mean=3.05, stddev=0.318], bias-{mean,stddev}=-0.7779,1.253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=3.84e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.40,0.44,0.56 0.70,0.84,1.3,1.8,2.2 2.5,2.7,2.9,4.3), mean=1.36, stddev=0.594], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.12 0.14,0.18,0.30,0.42,0.49 0.58,0.66,0.71,0.83), mean=0.312, stddev=0.142]
component name=prefinal-chain.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=0.5, count=38400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.40,0.44,0.56 0.70,0.84,1.3,1.8,2.2 2.5,2.7,2.9,4.3), mean=1.36, stddev=0.594], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,1.6,2.0,2.5 3.1,3.5,4.2,4.7,5.0 5.2,5.4,5.5,5.8), mean=4.05, stddev=0.795]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=725, output-dim=5160, learning-rate=0.0016, max-change=1.5, linear-params-rms=0.08225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.32,0.69,0.94 1.2,1.5,2.1,2.7,3.0 3.3,3.6,3.8,5.2), mean=2.09, stddev=0.721], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,2.5,4.3,4.7 5.1,5.4,5.8,6.4,6.8 7.1,7.5,7.8,8.6), mean=5.85, stddev=0.81], bias-{mean,stddev}=0.0002266,0.03807, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=725, output-dim=725, learning-rate=0.0016, max-change=0.75, linear-params-rms=0.0951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.9,2.1,2.2,2.3 2.4,2.5,2.6,2.7,2.7 2.8,2.8,2.8,2.9), mean=2.56, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.6,1.8,2.0 2.2,2.3,2.5,2.7,2.9 3.2,3.4,3.8,5.2), mean=2.53, stddev=0.386], bias-{mean,stddev}=-0.03536,1.107, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=725, self-repair-scale=1e-05, count=1.28e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.25,0.30,0.41 0.57,0.76,1.2,1.7,2.1 2.3,2.5,2.6,2.8), mean=1.25, stddev=0.559], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.19,0.24 0.28,0.35,0.50,0.66,0.75 0.81,0.86,0.87,0.90), mean=0.508, stddev=0.173]
component name=prefinal-xent.batchnorm type=BatchNormComponent, dim=725, block-dim=725, epsilon=0.001, target-rms=0.5, count=38400, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.25,0.30,0.40 0.58,0.76,1.2,1.7,2.1 2.3,2.5,2.6,2.8), mean=1.25, stddev=0.557], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.81,0.85,1.1 1.3,1.5,1.8,2.0,2.0 2.1,2.1,2.2,2.3), mean=1.73, stddev=0.298]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=725, output-dim=5160, learning-rate=0.008, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,1.4,1.9,2.3 2.5,2.8,3.3,3.8,4.0 4.2,4.4,4.5,5.3), mean=3.28, stddev=0.628], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6.0,7.6,7.6,8.0 8.2,8.5,8.9,9.3,9.5 9.8,10,11,11), mean=8.89, stddev=0.583], bias-{mean,stddev}=-5.669e-06,0.4626, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=5160
